// Generated by CoffeeScript 1.7.1
(function() {
  var Chordata, render_chord, zip;

  zip = function() {
    var arr, i, length, lengthArray, _i, _results;
    lengthArray = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arr = arguments[_i];
        _results.push(arr.length);
      }
      return _results;
    }).apply(this, arguments);
    length = Math.min.apply(Math, lengthArray);
    _results = [];
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      _results.push((function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = arguments.length; _j < _len; _j++) {
          arr = arguments[_j];
          _results1.push(arr[i]);
        }
        return _results1;
      }).apply(this, arguments));
    }
    return _results;
  };

  Chordata = (function() {
    function Chordata(el) {
      this.el = el;
      this.el = el;
      this.context = el.getContext('2d');
      this.PAD_LEFT = 25;
      this.PAD_TOP = 17;
      this.BAR_WIDTH = 30;
      this.COLOR_STRING = 'black';
      this.COLOR_MSTRING = 'lightgrey';
      this.COLOR_BAR = 'darkgrey';
      this.COLOR_INLAY = '#E8E8E8';
    }

    Chordata.prototype.line = function(start, end, color, width) {
      if (width == null) {
        width = 2;
      }
      this.context.beginPath();
      this.context.moveTo(start[0], start[1]);
      this.context.lineTo(end[0], end[1]);
      this.context.lineWidth = width;
      this.context.strokeStyle = color;
      this.context.stroke();
      return this.context.closePath();
    };

    Chordata.prototype.circle = function(x, y, radius, fill) {
      if (fill == null) {
        fill = 'black';
      }
      this.context.beginPath();
      this.context.arc(x, y, radius, 0, 2 * Math.PI, false);
      this.context.fillStyle = fill;
      this.context.fill();
      return this.context.closePath();
    };

    Chordata.prototype.render_chord = function(name, pattern, strings) {
      var b, bars, color, end, fill, i, muted, one, patt, radius, start, string, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _results, _results1;
      patt = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = pattern.length; _i < _len; _i++) {
          one = pattern[_i];
          if (one > 0) {
            _results.push(one);
          }
        }
        return _results;
      })();
      patt.sort(function(a, b) {
        return a - b;
      });
      start = patt.length ? (patt[0] === 1 ? 1 : patt[0] - 1) : 1;
      end = patt.length ? patt[patt.length - 1] + 2 : 5;
      bars = (function() {
        _results = [];
        for (var _i = start; start <= end ? _i < end : _i > end; start <= end ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      $(this.el).attr('width', (bars.length + 1) * this.BAR_WIDTH);
      $(this.el).css('width: ' + bars.length + 1) * this.BAR_WIDTH + 'px';
      $(this.el).attr('height', this.PAD_TOP * (strings.length + 2));
      $(this.el).css('height: ' + this.PAD_TOP * (strings.length + 2) + 'px');
      for (i = _j = 0, _len = bars.length; _j < _len; i = ++_j) {
        b = bars[i];
        this.line(start = [this.PAD_LEFT + (i * this.BAR_WIDTH), this.PAD_TOP], end = [this.PAD_LEFT + (i * this.BAR_WIDTH), this.PAD_TOP * strings.length], color = this.COLOR_BAR);
        this.context.fillStyle = this.COLOR_STRING;
        this.context.fillText(b, this.PAD_LEFT - this.BAR_WIDTH / 1.5 + this.BAR_WIDTH * (i + 1), this.PAD_TOP - this.PAD_TOP / 2);
        if (b === 3 || b === 5 || b === 7 || b === 9 || b === 12 || b === 15 || b === 17 || b === 19 || b === 21 || b === 24) {
          this.circle((this.PAD_LEFT - this.BAR_WIDTH / 2) + this.BAR_WIDTH * (b - bars[0] + 1), this.PAD_TOP * strings.length / 2 + this.PAD_TOP / 2, radius = 3.5, fill = this.COLOR_INLAY);
        }
      }
      _ref1 = zip(pattern, strings, (function() {
        _results1 = [];
        for (var _l = 0, _ref = strings.length + 1; 0 <= _ref ? _l < _ref : _l > _ref; 0 <= _ref ? _l++ : _l--){ _results1.push(_l); }
        return _results1;
      }).apply(this));
      for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
        _ref2 = _ref1[_k], one = _ref2[0], string = _ref2[1], i = _ref2[2];
        muted = one < 0 ? true : false;
        color = muted ? this.COLOR_MSTRING : this.COLOR_STRING;
        this.line(start = [this.PAD_LEFT, this.PAD_TOP * (i + 1)], end = [(bars.length + 1) * this.BAR_WIDTH, this.PAD_TOP * (i + 1)], color = color);
        this.context.fillStyle = color;
        this.context.fillText(string, this.PAD_LEFT / 2, this.PAD_TOP * (i + 1) + 2);
        if (one > 0) {
          this.circle((this.PAD_LEFT - this.BAR_WIDTH / 2) + this.BAR_WIDTH * (one - bars[0] + 1), this.PAD_TOP * (i + 1), 5.5);
        }
      }
      this.context.fillStyle = this.COLOR_STRING;
      return this.context.fillText(name, this.PAD_LEFT + this.BAR_WIDTH * bars.length / 2.5, this.PAD_TOP * (strings.length + 1.5));
    };

    return Chordata;

  })();

  render_chord = function(name, pattern, strings, cid) {
    var c, canvas;
    canvas = document.getElementById(cid);
    c = new Chordata(canvas);
    pattern = pattern.reverse();
    return c.render_chord(name, pattern, strings);
  };

  $(function() {
    var i, name, pattern, same_pattern, si, sname, spattern, strings, _i, _j, _len, _len1, _ref, _ref1;
    if (typeof RESULTS !== "undefined" && RESULTS !== null) {
      strings = STRINGS.reverse();
      for (i = _i = 0, _len = RESULTS.length; _i < _len; i = ++_i) {
        _ref = RESULTS[i], name = _ref[0], pattern = _ref[1], same_pattern = _ref[2];
        render_chord(name, pattern, strings, "c" + i);
        for (si = _j = 0, _len1 = same_pattern.length; _j < _len1; si = ++_j) {
          _ref1 = same_pattern[si], sname = _ref1[0], spattern = _ref1[1];
          render_chord(sname, spattern, strings, "cs" + si + "c" + i);
        }
      }
      $('a.with_same_pattern').on('click', function() {
        $(this).siblings('.same_pattern').toggle();
        return false;
      });
      return $('.same_pattern').hide();
    }
  });

}).call(this);

//# sourceMappingURL=chordata.map
